{"ast":null,"code":"import _slicedToArray from \"/home/sebastian/fullstack/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/sebastian/fullstack/src/index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Header = props => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, props.title));\n};\n\nconst Button = props => React.createElement(\"button\", {\n  onClick: props.handleClick,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13\n  },\n  __self: this\n}, props.text);\n\nconst Statistic = props => {\n  console.log(props);\n  return React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \" \", props.text, \" \"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \" \", props.stats), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \" \", props.text1, \" \"));\n};\n\nconst Statistics = props => {\n  console.log(props);\n  return React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(Statistic, {\n    text: \"good\",\n    stats: props.good,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }), React.createElement(Statistic, {\n    text: \"neutral\",\n    stats: props.neutral,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }), React.createElement(Statistic, {\n    text: \"bad\",\n    stats: props.bad,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), React.createElement(Statistic, {\n    text: \"all\",\n    stats: props.all,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), React.createElement(Statistic, {\n    text: \"average\",\n    stats: props.average,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }), React.createElement(Statistic, {\n    text: \"positive\",\n    stats: props.positive,\n    text1: \"%\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  })));\n};\n\nconst App = () => {\n  // save clicks of each button to own state\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        good = _useState2[0],\n        setGood = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        neutral = _useState4[0],\n        setNeutral = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        bad = _useState6[0],\n        setBad = _useState6[1];\n\n  const goodClick = newValue => {\n    setGood(1 + newValue);\n  };\n\n  const badClick = newValue => {\n    setBad(newValue + 1);\n  };\n\n  const neutralClick = newValue => {\n    setNeutral(newValue + 1);\n  };\n\n  const all = good + neutral + bad;\n  const g = good * 1;\n  const b = bad * -1;\n  const average = (g + b) / all;\n  const positive = good / all * 100;\n  const feedback = \"give feedback\";\n  const stat = \"statistics\";\n  if (all !== 0) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(Header, {\n    title: feedback,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), React.createElement(Button, {\n    handleClick: () => goodClick(good),\n    text: \"good\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), React.createElement(Button, {\n    handleClick: () => neutralClick(neutral),\n    text: \"neutral\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }), React.createElement(Button, {\n    handleClick: () => badClick(bad),\n    text: \"bad\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), React.createElement(Header, {\n    title: stat,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }), React.createElement(Statistics, {\n    good: good,\n    neutral: neutral,\n    bad: bad,\n    all: all,\n    average: average,\n    positive: positive,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }));else return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(Header, {\n    title: feedback,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }), React.createElement(Button, {\n    handleClick: () => goodClick(good),\n    text: \"good\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }), React.createElement(Button, {\n    handleClick: () => neutralClick(neutral),\n    text: \"neutral\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), React.createElement(Button, {\n    handleClick: () => badClick(bad),\n    text: \"bad\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), React.createElement(Header, {\n    title: stat,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \" No feedback given\"));\n};\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 95\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/home/sebastian/fullstack/src/index.js"],"names":["React","useState","ReactDOM","Header","props","title","Button","handleClick","text","Statistic","console","log","stats","text1","Statistics","good","neutral","bad","all","average","positive","App","setGood","setNeutral","setBad","goodClick","newValue","badClick","neutralClick","g","b","feedback","stat","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\n\nconst Header = (props) => {\n  return(\n  <div>\n    <h1>{props.title}</h1>\n  </div>\n)}\n\nconst Button = (props) => (\n  <button onClick={props.handleClick}>\n    {props.text}\n    </button>\n)\n\nconst Statistic = (props) => {\n  console.log(props)\n  return(\n    <tr>\n      <td> {props.text} </td>\n      <td> {props.stats}</td>\n      <td> {props.text1} </td>\n    </tr>\n  )\n}\nconst Statistics = (props) => {\n  console.log(props)\n  return(\n      <table>\n        <tbody>\n          <Statistic text={\"good\"} stats={props.good} />\n          <Statistic text={\"neutral\"} stats={props.neutral} />\n          <Statistic text={\"bad\"} stats={props.bad} />\n          <Statistic text={\"all\"} stats={props.all} />\n          <Statistic text={\"average\"} stats={props.average} />\n          <Statistic text={\"positive\"} stats={props.positive} text1={\"%\"} />\n        </tbody>\n      </table>\n  )\n}\n\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n\n  const goodClick = newValue => {\n    setGood(1 + newValue)\n  }\n\n  const badClick = newValue => {\n    setBad(newValue + 1)\n  }\n\n  const neutralClick = newValue => {\n    setNeutral(newValue + 1)\n  }\n\n  const all = good + neutral + bad\n  const g = good * 1\n  const b = bad * -1\n  const average = (g + b) / all\n  const positive = (good / all) * 100\n\n  const feedback = \"give feedback\"\n  const stat = \"statistics\"\n\n  if (all !== 0)\n  return (\n    <div>\n      <Header title={feedback}/>\n      <Button handleClick={() => goodClick(good)} text={\"good\"} />\n      <Button handleClick={() => neutralClick(neutral)} text={\"neutral\"} />\n      <Button handleClick={() => badClick(bad)} text={\"bad\"} />\n      <Header title={stat} />\n      <Statistics good={good} neutral={neutral} bad={bad} all={all} average={average} positive={positive} />\n    </div>\n  )\n  else\n  return (\n    <div>\n      <Header title={feedback}/>\n      <Button handleClick={() => goodClick(good)} text={\"good\"} />\n      <Button handleClick={() => neutralClick(neutral)} text={\"neutral\"} />\n      <Button handleClick={() => badClick(bad)} text={\"bad\"} />\n      <Header title={stat} />\n      <p> No feedback given</p>\n    </div>\n  )\n}\n\nReactDOM.render(<App />, \n  document.getElementById('root')\n)"]},"metadata":{},"sourceType":"module"}