{"ast":null,"code":"import _slicedToArray from \"/home/sebastian/fullstack/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/sebastian/fullstack/src/index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Header = props => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, props.title));\n};\n\nconst Button = props => React.createElement(\"button\", {\n  onClick: props.handleClick,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13\n  },\n  __self: this\n}, props.text);\n\nconst Statistics = props => {\n  console.log(props);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \" \", props.text, \" \", props.func, \" \"));\n};\n\nconst App = () => {\n  // save clicks of each button to own state\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        good = _useState2[0],\n        setGood = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        neutral = _useState4[0],\n        setNeutral = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        bad = _useState6[0],\n        setBad = _useState6[1];\n\n  const goodClick = newValue => {\n    setGood(1 + newValue);\n  };\n\n  const badClick = newValue => {\n    setBad(newValue + 1);\n  };\n\n  const neutralClick = newValue => {\n    setNeutral(newValue + 1);\n  };\n\n  const all = () => {\n    return good + neutral + bad;\n  };\n\n  const average = () => {\n    const g = good * 1;\n    const b = bad * -1;\n    return (g + b) / all();\n  };\n\n  const positive = () => {\n    return good / all() * 100;\n  };\n\n  const feedback = \"give feedback\";\n  const stat = \"statistics\";\n  const button1 = \"good\";\n  const button2 = \"netural\";\n  const button3 = \"bad\";\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(Header, {\n    title: feedback,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), React.createElement(Button, {\n    handleClick: () => goodClick(good),\n    text: button1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), React.createElement(Button, {\n    handleClick: () => neutralClick(neutral),\n    text: button2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), React.createElement(Button, {\n    handleClick: () => badClick(bad),\n    text: button3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), React.createElement(Header, {\n    title: stat,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(Statistics, {\n    text: button1,\n    func: good,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), React.createElement(Statistics, {\n    text: button2,\n    func: neutral,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), React.createElement(Statistics, {\n    text: button3,\n    func: bad,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \" all \", all(), \" \"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \" average \", average(), \" \"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \" positive \", positive(), \" % \"));\n};\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 82\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/home/sebastian/fullstack/src/index.js"],"names":["React","useState","ReactDOM","Header","props","title","Button","handleClick","text","Statistics","console","log","func","App","good","setGood","neutral","setNeutral","bad","setBad","goodClick","newValue","badClick","neutralClick","all","average","g","b","positive","feedback","stat","button1","button2","button3","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\n\nconst Header = (props) => {\n  return(\n  <div>\n    <h1>{props.title}</h1>\n  </div>\n)}\n\nconst Button = (props) => (\n  <button onClick={props.handleClick}>\n    {props.text}\n    </button>\n)\n\nconst Statistics = (props) => {\n  console.log(props)\n  return(\n    <div>\n      <p> {props.text} {props.func} </p>\n    </div>\n  )\n}\n\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n\n  const goodClick = newValue => {\n    setGood(1 + newValue)\n  }\n\n  const badClick = newValue => {\n    setBad(newValue + 1)\n  }\n\n  const neutralClick = newValue => {\n    setNeutral(newValue + 1)\n  }\n\n  const all = () => {\n    return good + neutral + bad\n  }\n\n  const average = () => {\n    const g = good * 1\n    const b = bad * -1\n    return ((g + b) / all())\n  }\n\n  const positive = () => {\n    return (good / (all())) * 100\n  }\n\n  const feedback = \"give feedback\"\n  const stat = \"statistics\"\n  const button1 = \"good\"\n  const button2 = \"netural\"\n  const button3= \"bad\"\n\n  return (\n    <div>\n      <Header title={feedback}/>\n      <Button handleClick={() => goodClick(good)} text={button1} />\n      <Button handleClick={() => neutralClick(neutral)} text={button2} />\n      <Button handleClick={() => badClick(bad)} text={button3} />\n      <Header title={stat} />\n      <Statistics text={button1} func={good} />\n      <Statistics text={button2} func={neutral} />\n      <Statistics text={button3} func={bad} />\n      <p> all {all()} </p>\n      <p> average {average()} </p>\n      <p> positive {positive()} % </p>\n    </div>\n  )\n}\n\nReactDOM.render(<App />, \n  document.getElementById('root')\n)"]},"metadata":{},"sourceType":"module"}