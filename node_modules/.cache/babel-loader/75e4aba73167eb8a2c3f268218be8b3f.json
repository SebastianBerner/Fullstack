{"ast":null,"code":"import _slicedToArray from \"/home/sebastian/fullstack/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/sebastian/fullstack/src/index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Header = props => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, props.title));\n};\n\nconst Button = props => React.createElement(\"button\", {\n  onClick: props.handleClick,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13\n  },\n  __self: this\n}, props.text);\n\nconst Statistic = props => {\n  console.log(props);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \" \", props.text, \" \", props.stats, \" \", props.text1, \" \"));\n};\n\nconst Statistics = props => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(Statistic, {\n    text: button1,\n    stats: good,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }), React.createElement(Statistic, {\n    text: button2,\n    stats: neutral,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), React.createElement(Statistic, {\n    text: button3,\n    stats: bad,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }), React.createElement(Statistic, {\n    text: alll,\n    stats: all,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }), React.createElement(Statistic, {\n    text: avg,\n    stats: average,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }), React.createElement(Statistic, {\n    text: pos,\n    stats: positive,\n    text1: procent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }));\n};\n\nconst App = () => {\n  // save clicks of each button to own state\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        good = _useState2[0],\n        setGood = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        neutral = _useState4[0],\n        setNeutral = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        bad = _useState6[0],\n        setBad = _useState6[1];\n\n  const goodClick = newValue => {\n    setGood(1 + newValue);\n  };\n\n  const badClick = newValue => {\n    setBad(newValue + 1);\n  };\n\n  const neutralClick = newValue => {\n    setNeutral(newValue + 1);\n  };\n\n  const all = good + neutral + bad;\n  const g = good * 1;\n  const b = bad * -1;\n  const average = (g + b) / all;\n  const positive = good / all * 100;\n  const feedback = \"give feedback\";\n  const stat = \"statistics\";\n  const button1 = \"good\";\n  const button2 = \"netural\";\n  const button3 = \"bad\";\n  const pos = \"positive\";\n  const avg = \"average\";\n  const alll = \"all\";\n  const procent = \"%\";\n  if (all !== 0) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(Header, {\n    title: feedback,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }), React.createElement(Button, {\n    handleClick: () => goodClick(good),\n    text: button1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), React.createElement(Button, {\n    handleClick: () => neutralClick(neutral),\n    text: button2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }), React.createElement(Button, {\n    handleClick: () => badClick(bad),\n    text: button3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }), React.createElement(Header, {\n    title: stat,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), React.createElement(Statistics, {\n    text: button1,\n    stats: good,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }));else return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(Header, {\n    title: feedback,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), React.createElement(Button, {\n    handleClick: () => goodClick(good),\n    text: button1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), React.createElement(Button, {\n    handleClick: () => neutralClick(neutral),\n    text: button2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }), React.createElement(Button, {\n    handleClick: () => badClick(bad),\n    text: button3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }), React.createElement(Header, {\n    title: stat,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \" No feedback given\"));\n};\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 97\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/home/sebastian/fullstack/src/index.js"],"names":["React","useState","ReactDOM","Header","props","title","Button","handleClick","text","Statistic","console","log","stats","text1","Statistics","button1","good","button2","neutral","button3","bad","alll","all","avg","average","pos","positive","procent","App","setGood","setNeutral","setBad","goodClick","newValue","badClick","neutralClick","g","b","feedback","stat","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\n\nconst Header = (props) => {\n  return(\n  <div>\n    <h1>{props.title}</h1>\n  </div>\n)}\n\nconst Button = (props) => (\n  <button onClick={props.handleClick}>\n    {props.text}\n    </button>\n)\n\nconst Statistic = (props) => {\n  console.log(props)\n  return(\n    <div>\n      <p> {props.text} {props.stats} {props.text1} </p>\n    </div>\n  )\n}\nconst Statistics = (props) => {\n  return(\n  <div>\n    <Statistic text={button1} stats={good} />\n    <Statistic text={button2} stats={neutral} />\n    <Statistic text={button3} stats={bad} />\n    <Statistic text={alll} stats={all} />\n    <Statistic text={avg} stats={average} />\n    <Statistic text={pos} stats={positive} text1={procent} />\n  </div>\n  )\n}\n\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n\n  const goodClick = newValue => {\n    setGood(1 + newValue)\n  }\n\n  const badClick = newValue => {\n    setBad(newValue + 1)\n  }\n\n  const neutralClick = newValue => {\n    setNeutral(newValue + 1)\n  }\n\n  const all = good + neutral + bad\n  const g = good * 1\n  const b = bad * -1\n  const average = (g + b) / all\n  const positive = (good / all) * 100\n\n  const feedback = \"give feedback\"\n  const stat = \"statistics\"\n  const button1 = \"good\"\n  const button2 = \"netural\"\n  const button3= \"bad\"\n  const pos = \"positive\"\n  const avg = \"average\"\n  const alll = \"all\"\n  const procent = \"%\"\n\n  if (all !== 0)\n  return (\n    <div>\n      <Header title={feedback}/>\n      <Button handleClick={() => goodClick(good)} text={button1} />\n      <Button handleClick={() => neutralClick(neutral)} text={button2} />\n      <Button handleClick={() => badClick(bad)} text={button3} />\n      <Header title={stat} />\n      <Statistics text={button1} stats={good} />\n    </div>\n  )\n  else\n  return (\n    <div>\n      <Header title={feedback}/>\n      <Button handleClick={() => goodClick(good)} text={button1} />\n      <Button handleClick={() => neutralClick(neutral)} text={button2} />\n      <Button handleClick={() => badClick(bad)} text={button3} />\n      <Header title={stat} />\n      <p> No feedback given</p>\n    </div>\n  )\n}\n\nReactDOM.render(<App />, \n  document.getElementById('root')\n)"]},"metadata":{},"sourceType":"module"}